{"ast":null,"code":"var _jsxFileName = \"/var/www/tulipstestlogin/src/components/CountryList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountryList = () => {\n  _s();\n  const [countries, setCountries] = useState([]);\n  const [newCountry, setNewCountry] = useState('');\n  const [error, setError] = useState('');\n\n  // Fetch the countries when the component loads\n  useEffect(() => {\n    fetchCountries();\n  }, []);\n  const fetchCountries = () => {\n    axios.get('http://localhost:8000/api/countries').then(response => {\n      setCountries(response.data);\n    }).catch(error => {\n      console.error('There was an error fetching the countries!', error);\n    });\n  };\n  const addCountry = e => {\n    e.preventDefault();\n    if (newCountry.trim() === '') {\n      setError('Country name cannot be empty');\n      return;\n    }\n    axios.post('http://localhost:8000/api/countries', {\n      name: newCountry\n    }).then(response => {\n      setCountries([...countries, response.data]);\n      setNewCountry('');\n      setError('');\n    }).catch(err => {\n      setError('Error adding country, it may already exist.');\n    });\n  };\n  const deleteCountry = id => {\n    axios.delete(`http://localhost:8000/api/countries/${id}`).then(() => {\n      setCountries(countries.filter(country => country.id !== id));\n    }).catch(error => {\n      console.error('There was an error deleting the country!', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Country List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addCountry,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"country\",\n          className: \"form-label\",\n          children: \"Add Country\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          id: \"country\",\n          value: newCountry,\n          onChange: e => setNewCountry(e.target.value),\n          placeholder: \"Enter country name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        children: \"Add Country\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group mt-3\",\n      children: countries.map(country => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item d-flex justify-content-between align-items-center\",\n        children: [country.name, /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger btn-sm\",\n          onClick: () => deleteCountry(country.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this)]\n      }, country.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(CountryList, \"3WAB26ReyUrrX/UJEdzJ1Wtq0hU=\");\n_c = CountryList;\nexport default CountryList;\nvar _c;\n$RefreshReg$(_c, \"CountryList\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","CountryList","_s","countries","setCountries","newCountry","setNewCountry","error","setError","fetchCountries","get","then","response","data","catch","console","addCountry","e","preventDefault","trim","post","name","err","deleteCountry","id","delete","filter","country","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","value","onChange","target","placeholder","map","onClick","_c","$RefreshReg$"],"sources":["/var/www/tulipstestlogin/src/components/CountryList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst CountryList = () => {\n    const [countries, setCountries] = useState([]);\n    const [newCountry, setNewCountry] = useState('');\n    const [error, setError] = useState('');\n\n    // Fetch the countries when the component loads\n    useEffect(() => {\n        fetchCountries();\n    }, []);\n\n    const fetchCountries = () => {\n        axios.get('http://localhost:8000/api/countries')\n            .then(response => {\n                setCountries(response.data);\n            })\n            .catch(error => {\n                console.error('There was an error fetching the countries!', error);\n            });\n    };\n\n    const addCountry = (e) => {\n        e.preventDefault();\n        if (newCountry.trim() === '') {\n            setError('Country name cannot be empty');\n            return;\n        }\n\n        axios.post('http://localhost:8000/api/countries', { name: newCountry })\n            .then(response => {\n                setCountries([...countries, response.data]);\n                setNewCountry('');\n                setError('');\n            })\n            .catch(err => {\n                setError('Error adding country, it may already exist.');\n            });\n    };\n\n    const deleteCountry = (id) => {\n        axios.delete(`http://localhost:8000/api/countries/${id}`)\n            .then(() => {\n                setCountries(countries.filter(country => country.id !== id));\n            })\n            .catch(error => {\n                console.error('There was an error deleting the country!', error);\n            });\n    };\n\n    return (\n        <div className=\"container\">\n            <h2>Country List</h2>\n\n            {/* Add Country Form */}\n            <form onSubmit={addCountry}>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"country\" className=\"form-label\">Add Country</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"country\"\n                        value={newCountry}\n                        onChange={(e) => setNewCountry(e.target.value)}\n                        placeholder=\"Enter country name\"\n                    />\n                </div>\n                {error && <div className=\"alert alert-danger\">{error}</div>}\n                <button type=\"submit\" className=\"btn btn-primary\">Add Country</button>\n            </form>\n\n            {/* Country List */}\n            <ul className=\"list-group mt-3\">\n                {countries.map((country) => (\n                    <li key={country.id} className=\"list-group-item d-flex justify-content-between align-items-center\">\n                        {country.name}\n                        <button className=\"btn btn-danger btn-sm\" onClick={() => deleteCountry(country.id)}>Delete</button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default CountryList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}